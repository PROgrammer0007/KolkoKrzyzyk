import javax.swing.*;
import java.util.Scanner;

public class TicTacToe {
    public static void main(String[] args)
    {
        // Tekst startowy
        System.out.println("Witaj w grze, podaj rozmiar planszy");

        // Ustalanie wymiaru planszy
        int wymiar = new Scanner(System.in).nextInt();  // o wymiarze planszy decyduje gracz
        // Startowy symbol
        char obecnySymbol = 'X'; // symbol z góry ustalony

        char[][] plansza = new char[wymiar][wymiar]; // tworzenie nowej planszy o wymiarach podanych przez u¿ytkownika
         //  {{'0','X','X'},{'X','0','X'},{'0','0','X'}}; // przyk³ad narzuconej planszy przez nas, aby coœ wyœwietliæ i sprawdziæ jak bêdzie wygl¹da³a

        // pêtla steruj¹ca gr¹
        boolean czyKontynowac = true; // do zakoñczenia pêtli po wygranej
        int licznikRuchow = 0;
        while(czyKontynowac && licznikRuchow<=wymiar*wymiar)
        {
            // Drukowanie planszy
            TicTacToe.drukujPlansze(plansza); // metoda .drukujPlansze(plansza) zosta³a przerzucona do nowej classy dla porz¹dku, w nawiasie jest (plansza) aby wykona³a siê klasa o danym konstruktorze

            // sprawdzenie poprawnoœci ruch i wykonanie ruch
            boolean ruchPoprawny = wykonajRuch(plansza, obecnySymbol);
            licznikRuchow++;
            if(ruchPoprawny) // jeœli z metody otrzymamy true to ruch jest poprawny a wiêc teraz warto sprawdziæ czy dany ruch nie jest wygrywaj¹cym
            {
                boolean wygranaWiesze = sprawdzWiersze(plansza, obecnySymbol);
                boolean wygranaKolumny = sprawdzKolumny(plansza, obecnySymbol);
                boolean wygranaSkos1 = sprawdzSkos1(plansza, obecnySymbol);
                boolean wygranaSkos2 = sprawdzSkos2(plansza, obecnySymbol);

                // co ma siê staæ jeœli ktoœ wygra
                if(wygranaWiesze || wygranaKolumny || wygranaSkos1 || wygranaSkos2)
                {
                    TicTacToe.drukujPlansze(plansza);
                    System.out.println("Gratulacje wygranej: " + obecnySymbol);
                    czyKontynowac = false;
                    // break; // przerwie program zamiast czyKontynowac = false;
                }

                obecnySymbol = obecnySymbol == 'X' ? 'O' : 'X';
            }
        }
    }



    public static boolean sprawdzWiersze(char[][] plansza, char symbol)
    {
        int wymiar = plansza.length; // wymiar jest równy d³ugoœci planszy, d³ugoœæ planszy znamy po wyborze gracza

        for(int wiersz = 0; wiersz<wymiar; wiersz++) // sprawdzenie poszczególnych wierszy
        {
            boolean wygrana = true; // przed wejœciem do pêtli chcemy otrzymaæ true - jeœli pêtla zmieni to ok :)
            for(int kolumna = 0; kolumna<wymiar; kolumna++) // sprawdzenie poszczególnych kolumn w danym wierszu
            {
                if(plansza[wiersz][kolumna]!=symbol) // jeœli w danej kolumnie wiersza symbol jest inny ni¿ ma gracz wygrana to nie ma sensu sprawdzaæ reszty
                {
                    wygrana = false; // zwraca false
                    break; // przerywa sprawdzanie wiersza
                }
            }
            if(wygrana) // jeœli wykonanie wewnetrznej pêtli zwróci wygran¹ nie ma sensu wykonywaæ dalszych pêtli dlatego zracamy true
                return true;
        }
        return false; // jeœli ani jedno podwóje przejœcie po pêtlach nie da ani jednego dobrego rezultatu zwracamy false

    }

    public static boolean sprawdzKolumny(char[][] plansza, char symbol)
    {
        int wymiar = plansza.length;

        for(int kolumna = 0; kolumna<wymiar; kolumna++)
        {
            boolean wygrana = true;
            for(int wiersz = 0; wiersz<wymiar; wiersz++)
            {
                if(plansza[wiersz][kolumna]!=symbol)
                {
                    wygrana = false;
                    break;
                }
            }
            if(wygrana)
                return true;
        }
        return false;
    }

    public static boolean sprawdzSkos1(char[][] plansza, char symbol)
    {
        int wymiar = plansza.length;

        for(int i = 0; i<wymiar; i++)
        {
            if(plansza[i][i]!=symbol) // jeœli symbol bêdzie inny ni¿ obecny symbol wejdziemy do wnêtrze i zwrócimy false
                return false;
        }
        return true;
    }

    public static boolean sprawdzSkos2(char[][] plansza, char symbol)
    {
        if(plansza[2][0]==symbol && plansza[1][1]==symbol && plansza[0][2]==symbol)
            return true;
        else
            return false;
    }

    public static boolean wykonajRuch(char[][] plansza, char symbol) {

        System.out.println(symbol + " twój ruch");
        System.out.println("Podaj index wiersza");
        int wiersz = new Scanner(System.in).nextInt();
        System.out.println("Podaj index klumny");
        int kolumna = new Scanner(System.in).nextInt();

        boolean ruchPoprawny = plansza[wiersz][kolumna] == 0; // sprawdza czy pole jest puste

        if (!ruchPoprawny) {
            System.out.println("Ruch nie jest poprawny");
            return false; // jeœli ruch bêdzie nie poporawny zwróci false (zmiana z zakoñczenia continue bt
            //continue; //blokuje dalsze wykonywanie instrukcji i rozpoczyna od nowa pêtle, nic siê dalej nie podstawi
        }
        plansza[wiersz][kolumna] = symbol;
            return true;
    }

    public static void drukujPlansze(char[][] plansza)
    {
        int wymiar = plansza.length;

        // nag³ówki kolumn
        System.out.print("\t");
        //petla drukuj¹ca nag³ówki kolumn
        for(int i=0; i<wymiar;i++){
            System.out.print(i+"\t");
        }
        System.out.println();

        // drukowanie wierszy
        for(int wiersz = 0; wiersz<wymiar;wiersz++)
        {
            System.out.print(wiersz +":\t");
            for(int kolumna = 0; kolumna<wymiar;kolumna++)
            {
                System.out.print(plansza[wiersz][kolumna] + "\t");
            }
            System.out.println();
        }
    }
}
